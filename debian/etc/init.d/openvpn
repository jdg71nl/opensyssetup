#!/bin/bash
#
# openvpn       This shell script takes care of starting and stopping
#               openvpn on RedHat or other chkconfig-based system.
#
# chkconfig: 345 24 76
#
# description: OpenVPN is a robust and highly flexible tunneling application that
#              uses all of the encryption, authentication, and certification features
#              of the OpenSSL library to securely tunnel IP networks over a single
#              UDP port.
#

### BEGIN INIT INFO
# Provides:          openvpn
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $network $syslog
# Should-Stop:       $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop openvpn
# Description:       some
### END INIT INFO

# Contributed to the OpenVPN project by
# Douglas Keller <doug@voidstar.dyndns.org>
# 2002.05.15

# To install:
#   copy this file to /etc/rc.d/init.d/openvpn
#   shell> chkconfig --add openvpn
#   shell> mkdir /etc/openvpn
#   make .conf or .sh files in /etc/openvpn (see below)

# To uninstall:
#   run: chkconfig --del openvpn

# Author's Notes:
#
# I have created an /etc/init.d init script and enhanced openvpn.spec to
# automatically register the init script.  Once the RPM is installed you
# can start and stop OpenVPN with "service openvpn start" and "service
# openvpn stop".
#
# The init script does the following:
#
# - Starts an openvpn process for each .conf file it finds in
#   /etc/openvpn.
#
# - If /etc/openvpn/xxx.sh exists for a xxx.conf file then it executes
#   it before starting openvpn (useful for doing openvpn --mktun...).
#
# - In addition to start/stop you can do:
#
#   service openvpn reload - SIGHUP
#   service openvpn reopen - SIGUSR1
#   service openvpn status - SIGUSR2

# Modifications 2003.05.02
#   * Changed == to = for sh compliance (Bishop Clark).
#   * If condrestart|reload|reopen|status, check that we were
#     actually started (James Yonan).
#   * Added lock, piddir, and work variables (James Yonan).
#   * If start is attempted twice, without an intervening stop, or
#     if start is attempted when previous start was not properly
#     shut down, then kill any previously started processes, before
#     commencing new start operation (James Yonan).
#   * Do a better job of flagging errors on start, and properly
#     returning success or failure status to caller (James Yonan).


#jdg
# extract section (if started with /etc/init.d/openvpn-section as symbolic link)
section=${0##*openvpn-}
if [ "$section" == "$0" ]; then
        section=""
        echo "jdg: please start only the sections, which is symbolic links to this"
        exit 0
fi

# Location of openvpn binary
openvpn=""
openvpn_locations="/usr/sbin/openvpn /usr/local/sbin/openvpn"
for location in $openvpn_locations
do
  if [ -f "$location" ]
  then
    openvpn=$location
  fi
done

# Lockfile
#lock="/var/lock/subsys/openvpn"
#jdg
mkdir -pv /var/lock/subsys/
lock="/var/lock/subsys/openvpn-$section"

# PID directory
#piddir="/var/run/openvpn"
#jdg
piddir="/var/run/openvpn-$section"
mkdir -p $piddir

# Our working directory
#work=/etc/openvpn
#jdg
work="/etc/openvpn/$section"

# Source function library.
#jdg: only REDHAT: . /etc/rc.d/init.d/functions

# Source networking configuration.
#jdg: only REDHAT:. /etc/sysconfig/network

# Check that networking is up.
#jdg: only REDHAT:if [ ${NETWORKING} = "no" ]
#jdg: only REDHAT:then
#jdg: only REDHAT:  echo "Networking is down"
#jdg: only REDHAT:  exit 0
#jdg: only REDHAT:fi

# Check that binary exists
if ! [ -f  $openvpn ]
then
  echo "openvpn binary not found"
  exit 0
fi

failure() {
        echo "OK"
}

success() {
        echo "OK"
}

# See how we were called.
case "$1" in
  start)
        #echo -n $"Starting openvpn: "
        #jdg
        echo -n $"Starting openvpn-$section: "

        /sbin/modprobe tun >/dev/null 2>&1

        # From a security perspective, I think it makes
        # sense to remove this, and have users who need
        # it explictly enable in their --up scripts or
        # firewall setups.

        #jdg
        echo 1 > /proc/sys/net/ipv4/ip_forward

        if [ ! -d  $piddir ]; then
            mkdir $piddir
        fi

        if [ -f $lock ]; then
            # we were not shut down correctly

            for pidf in `/bin/ls $piddir/*.start_and_restart.pid 2>/dev/null`; do
              if [ -s $pidf ]; then
                kill `cat $pidf` >/dev/null 2>&1
              fi
              rm -f $pidf
            done
            rm -f $lock

            for pidf in `/bin/ls $piddir/*.openvpn.pid 2>/dev/null`; do
              if [ -s $pidf ]; then
                kill `cat $pidf` >/dev/null 2>&1
              fi
              rm -f $pidf
            done
            rm -f $lock

            sleep 2
        fi

        rm -f $piddir/*.pid
        cd $work

        # Start every .conf in $work and run .sh if exists
        errors=0
        successes=0
        for c in `/bin/ls *.conf 2>/dev/null`; do
            bn=${c%%.conf}
            if [ -f "$bn.sh" ]; then
                . $bn.sh
            fi
            rm -f $piddir/*.pid

            #jdg
                                #$openvpn --daemon --writepid $piddir/$bn.pid --config $c --cd $work

            /etc/init.d/start_and_restart.sh $piddir/${bn}.start_and_restart.pid $openvpn --writepid $piddir/$bn.openvpn.pid --config $c --cd $work &

            if [ $? = 0 ]; then
                successes=1
            else
                errors=1
            fi
        done

        if [ $errors = 1 ]; then
            failure; echo
        else
            success; echo
        fi

        if [ $successes = 1 ]; then
            touch $lock
        fi
        ;;
  stop)
        #echo -n $"Shutting down openvpn: "
        #jdg
        echo -n $"Shutting down openvpn-$section: "

                  #jdg
        for pidf in `/bin/ls $piddir/*.start_and_restart.pid 2>/dev/null`; do
          if [ -s $pidf ]; then
            kill `cat $pidf` >/dev/null 2>&1
          fi
          rm -f $pidf
        done

        for pidf in `/bin/ls $piddir/*.openvpn.pid 2>/dev/null`; do
          if [ -s $pidf ]; then
            kill `cat $pidf` >/dev/null 2>&1
          fi
          rm -f $pidf
        done

        success; echo
        rm -f $lock
        ;;
  restart)
        $0 stop
        sleep 2
        $0 start
        ;;
  reload)
        if [ -f $lock ]; then
            for pidf in `/bin/ls $piddir/*.openvpn.pid 2>/dev/null`; do
                if [ -s $pidf ]; then
                    kill -HUP `cat $pidf` >/dev/null 2>&1
                fi
            done
        else
            #echo "openvpn: service not started"
            #jdg
                echo "openvpn-$section: service not started"
            exit 1
        fi
        ;;
  reopen)
        if [ -f $lock ]; then
            for pidf in `/bin/ls $piddir/*.openvpn.pid 2>/dev/null`; do
                if [ -s $pidf ]; then
                    kill -USR1 `cat $pidf` >/dev/null 2>&1
                fi
            done
        else
            #echo "openvpn: service not started"
            #jdg
                echo "openvpn-$section: service not started"
            exit 1
        fi
        ;;
  condrestart)
        if [ -f $lock ]; then
            $0 stop
            # avoid race
            sleep 2
            $0 start
        fi
        ;;
  status)
        if [ -f $lock ]; then
            for pidf in `/bin/ls $piddir/*.openvpn.pid 2>/dev/null`; do
                if [ -s $pidf ]; then
                    kill -USR2 `cat $pidf` >/dev/null 2>&1
                fi
            done
            #echo "Status written to /var/log/messages"
            #jdg
                echo "openvpn-$section: USR2 signal sent [Status written to /var/log/messages ??]"
        else
            #echo "openvpn: service not started"
            #jdg
                echo "openvpn-$section: service not started"
            exit 1
        fi
        ;;
  *)
        #echo "Usage: openvpn {start|stop|restart|condrestart|reload|reopen|status}"
        #jdg
        echo "Usage: openvpn-$section {start|stop|restart|condrestart|reload|reopen|status}"
        exit 1
        ;;
esac
exit 0
