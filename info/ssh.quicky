# ssh.quicky

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----

Overview:
- user1@client connects using ssh to user2@server
- on client this config is used: /etc/ssh/ssh_config 
- on client the server-pub-key is stored in: ~/.ssh/known_hosts 
- on client the private/public key are stored in: ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub
- on server this config is used: /etc/ssh/sshd_config 
- on server the client-pub-key is searched in: ~/.ssh/authorized_keys


Notes:
- warning when using alt-port-numbers for ssh: the ~/.ssh/known_hosts will only store 1 pub-key per host
  so: conflicts with multiple ssh-ports on 1 host, of which one ssh-port is a redir-process to another host
  seen this with: subversion (alt-port)

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# port-forward

# ssh options for port forwarding:
-L lport1:rhost2:rport2
read like this: on Local=ssh-clients; open port lport1; connect this on remote host rhost2:rport2|
So: this is port-forward from sshclient:lport1 --to--> sshserver:(rhost2:rport2)

-R rport1:lhost2:lport2
read like this: on Remote=ssh-server; open port rport1; connect this to lhost2:lport2|
So: this is port-forward from sshserver:rport1 --to--> sshclient:(lhost2:lport2)

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----

# port-forwarding (vnc)
host1> ssh -p 2221 -L 5910:127.0.0.1:5901 jdg@host2
SSH:host2>
# NOTE: you can break CLI session, but KEEP port-forwarding with ~/tilde ctrl-Z
~^Z         (stop it and return to local prompt)
host1> bg   (let it run in background)
host1> vncviewer 127.0.0.1:10
# this will connect on host2:1

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----

The supported escapes (assuming the default ‘~’) are:
~.      Disconnect.
~^Z     Background ssh.
~#      List forwarded connections.
~&      Background ssh at logout when waiting for forwarded connection / X11 sessions to terminate.
~?      Display a list of escape characters.

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# howto make SSH-tunnel (client gives access-back from server)

# on server:
# system login used by SSH only (no shell possible, but will have pwd!)
useradd -d /tmp -M -g Nobody -p tunnel4me -s /sbin/nologin sshtunnel

# client-side login:
client> ssh sshtunnel@host -R 1022:127.0.0.1:22 -N
# -N means: dont start shell on server, just do port forwarding.

# on the server:
server> ssh -p 1022 localhost
# this will connect to client:SSH/22

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# when SSH login is very slow (untill pwd-prompt arrives): disable GSS

# (maybe from Debian_4 to CentOS_5.2)
# debian4> grep GSS /etc/ssh/ssh_config 
# GSSAPIAuthentication yes
# GSSAPIDelegateCredentials no

vi /etc/ssh/sshd_config 
#jdg - GSS makes login ssh very slow (also times out, see client-side: ssh -vv ...)
#GSSAPIAuthentication yes

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# X11 forwarding on Debian-4:

need xauth on X-server.

# this was the problem:
> ssh -X -v root@172.24.2.6
...
root@172.24.2.6's password: 
debug1: Requesting X11 forwarding with authentication spoofing.
debug1: Remote: No xauth program; cannot forward with spoofing.

# it worked after install on server (the machine to where you start SSH session):
# install X11 (xinit, xauth) (http://packages.debian.org/squeeze/xbase-clients):
apt-get install xbase-clients
aptitude install xbase-clients

# note
> cat /etc/ssh/sshd_config  | grep X
X11Forwarding yes
X11DisplayOffset 10
> echo $DISPLAY
localhost:10.0

# on CentOS:
yum install xauth
> cat /etc/ssh/sshd_config  | grep X
X11Forwarding yes

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# ssh public key encryption

you can connect from user1@client to user2@server using publickey instead of passwords
- on user1@client generate public/private kay pair
- copy public-key to user2@server

when generating key: you can use empty password.
if password (that is local only, applicable to private-key): use ssh-agent to automate type pwd once.
	
# on client:
# generate key (id_rsa is version-2-RSA is recommeded, identity=version-1-RSA, DSA is not recommended)
mkdir -p $HOME/.ssh
chmod 0700 $HOME/.ssh
if [ ! -f $HOME/.ssh/id_rsa ] ; then date > $HOME/.ssh/id_rsa.generate.txt ; ssh-keygen -t rsa -f $HOME/.ssh/id_rsa -P '' >> $HOME/.ssh/id_rsa.generate.txt; fi

# copy key to account@server
HOSTNAME=`/bin/hostname`
KEY_PREFIX="command=\"/usr/local/syssetup/bin/smartbackup-create-and-watch-file.sh $HOSTNAME\",no-agent-forwarding,no-X11-forwarding"
KEY_ENTRY="$KEY_PREFIX "`cat ~/.ssh/id_rsa.pub`
echo $KEY_ENTRY | ssh -p2221 -o PreferredAuthentications=password sbwrite@smartbackup.networkconcepts.nl "mkdir -p /sbwrite/$HOSTNAME/; mkdir -p ~/.ssh/ ; chmod 700 ~/.ssh/ ; touch ~/.ssh/authorized_keys ; chmod 600 ~/.ssh/authorized_keys ; cat >> ~/.ssh/authorized_keys"

# connect with port-map and dummy-command and go to background:
ssh -p2221 -L8730:127.0.0.1:873 -f -x -o PreferredAuthentications=publickey sbwrite@smartbackup.networkconcepts.nl 'sleep 10'

# force login with publickey (instead password)
ssh -p2221 -o PreferredAuthentications=publickey sbwrite@smartbackup.networkconcepts.nl
# login first with publickey else password
ssh -p2221 -o PreferredAuthentications=password sbwrite@smartbackup.networkconcepts.nl

# is problems with SSH login (can hang on authtype), do -v:
ssh -v -p2221 sbwrite@smartbackup.networkconcepts.nl


# note: on helmsdeep (centos_5.2) it did not work as server
# this solved it:
# /etc/ssh/sshd_config 
# RSAAuthentication yes
# PubkeyAuthentication yes
# AuthorizedKeysFile %h/.ssh/authorized_keys

# need PUBKEY enabled on server:
> cat /etc/ssh/sshd_config | egrep -i '^[# ]*(RSAAuthentication|PubkeyAuthentication|AuthorizedKeysFile)'
RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile .ssh/authorized_keys

# setup PUBKEY:
cat ~/.ssh/id_rsa.pub | ssh -p2221 jdgncnl@flexvpn2.networkconcepts.nl 'mkdir -p ~/.ssh/;chmod 0700 ~/.ssh/;touch ~/.ssh/authorized_keys;chmod 0700 ~/.ssh/authorized_keys;cat >> ~/.ssh/authorized_keys' 

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# log good/bad SSH logins:

> ls -1 /var/log/?tmp 
/var/log/btmp
/var/log/wtmp

# show logins with command:
last
lastb

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# OpenSSH

# check config:
> /usr/sbin/sshd -t
/etc/ssh/sshd_config: line 124: Bad configuration option: Match
/etc/ssh/sshd_config: line 126: Bad configuration option: ForceCommand
/etc/ssh/sshd_config: terminating, 2 bad configuration options

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# simple example SSH Public Key:

# on client-host (from where you want access) do:
# first log in via regular ssh to create proper .ssh dir in homedir
# use blank-pwd:
ssh-keygen -t dsa 
# copy-paste key:
cat .ssh/id_dsa.pub 

# note: key shows user@host that want access:
> cat .ssh/id_dsa.pub 
ssh-dss QU.....U= root@samba.de-graaff.lan

# on server-host (to which you want accces) do:
# first log in via regular ssh to create proper .ssh dir in homedir
touch ~/.ssh/authorized_keys
chmod 0700 ~/.ssh/authorized_keys
cat >> ~/.ssh/authorized_keys

# now from client you can login without pwd:
ssh -p2221 jdgncnl@172.24.2.250

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# how to regen SSH server/host keys after hostname change:

# debian
rm /etc/ssh/ssh_host_*
dpkg-reconfigure openssh-server

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# Gnome over X11/SSH:

# http://www.linuxtopia.org/online_books/linux_beginner_books/debian_linux_desktop_survival_guide/SSH_X.shtml

> cat /etc/X11/Xsession.options | grep agent
use-ssh-agent

> cat ~/.xsession
#!/bin/sh
ssh-add .ssh/id_dsa < /dev/null
exec gnome-session

> cat ~/.ssh/config
Host *
    ForwardX11 yes

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----
# allow only certain users to login via SSH:

> cat /etc/ssh/sshd_config  | grep ^AllowUsers
AllowUsers jdg jdgncnl mdjncnl moncnl

# ---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++---+++-----

